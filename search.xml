<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[知比APP详情]]></title>
    <url>%2F2019%2F09%2F18%2Fzhibi%2F</url>
    <content type="text"><![CDATA[知比 —— 一款致力于帮助用户一站式参赛体验的APP简介：这是一款由我在内的3名大学生组建的知比团队研究并设计的一款致力于帮助用户一站式参赛体验的APP。在这次的学术设计团中，本次项目以我为团队队长，让我有了第一次组织团队合作并参与到实际大型比赛中的经历。虽然在比赛中并没能取得较好的成绩，但是这款APP的设计也是我们团队每个成员的努力的成果。 题目选定大学生活中，总会面临各种各样的挑战，但要如何证明自己？参加比赛的想法就不由而生了，可是在比赛前中后的道路上却又寸步难行。 产品概念 需求分析 用户访谈 问卷调查 用户画像 信息架构 线框图 故事板故事内容：故事讲述了一位在校大学生想要参加比赛，可是在寻找比赛信息的过程中遇上了很多问题，最后通过知比APP解决了有关于比赛信息筛选，组队等的问题。ps：原画 —— WZM，文案 —— HQB(本人)。 细节设计 核心功能 商业模式 商业画布 收获与感想这个项目参加了UXDA用户体验大赛，成功通过初赛，但不幸地是并没能通过复赛进入分区决赛。但即便这样，这次项目也是我们团队的心血。作为队长，我负责了用户访谈，以及调研总结，信息架构绘制，线框图部署，页面视觉确定以及阶段PTT的制作等大量工作，虽然挺累但收获挺大。本次项目以我为团队队长，让我有了第一次组织团队合作并参与到实际大型比赛中的经历。让我明白了，在团队协作中，合理安排任务，以及每个人对团队的责任心的重要性。]]></content>
      <tags>
        <tag>本人参与作品</tag>
        <tag>学术经历</tag>
        <tag>UI设计</tag>
        <tag>app设计</tag>
        <tag>icon</tag>
        <tag>团队队长</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[集宠APP详情]]></title>
    <url>%2F2019%2F09%2F17%2Fjichong%2F</url>
    <content type="text"><![CDATA[集宠 —— 一款致力于流浪宠物救助及宠物社区服务的APP简介：这是一款由我在内的3名大学生组建的叮叮当团队研究并设计的一款致力于流浪宠物救助及宠物社区服务的APP。其中我主要负责了信息架构、用户访谈、视觉设计等工作。这是我大学生涯中参与到的第一款APP设计，虽然设计并不出彩，但是对于我来说也是一次宝贵的经历，让我体验到了设计工作的难点与乐趣以及和团队成员合作的乐趣。 选题分析当前宠物现状]]></content>
      <tags>
        <tag>app</tag>
        <tag>个人参与作品</tag>
        <tag>本人参与作品</tag>
        <tag>学术经历</tag>
        <tag>UI设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript 排序]]></title>
    <url>%2F2019%2F09%2F06%2FJavaScript%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[接下来这里将为你展示几种实现JavaScript中对数组进行排序的方法。这里将为你带来三种有关数组排序的方法，其中有系统自带函数，还有我自己封装的选择排序方法和冒泡排序方法。 1. 第一种方法使用数组原型链上的方法，即JS自己给定的方法 sort代码如下： 12var arr = [1, 9, 8, 12, 5];arr.sort(); 细心的能够发现sort方法虽然对数组进行了排序，但是排得不正确，那该怎么办呢？ 如果我们给sort()里面加个函数会怎么样呢？不妨我们来试一试 12345var arr = [5, 1, 4, 22, 17, 13];arr.sort(function (a, b) &#123; return a - b; // 这里是升序 // return b - a; // 这里是降序&#125;) 注意sort()里面添加函数，其中的函数必须要有两个参数，参数随便定义，这两个参数代表的是函数里相邻的两个元素，return的值如果大于0，那么这两个数就会交换位置，否则就不会交换位置。所以这里巧妙地使用了(a - b)作为其返回值来判断a是否大于b，进而进行数组内地两两相邻的元素大小的比较。 【运用】 乱序因为这个排序方法是利用return返回的值来进行一个排序的，所以我们可以根据一个随机数来判断a和b是否交换位置，所以就可以进行一个简单的乱序算法。代码如下： 123arr.sort(function (a, b) &#123; return 0.5 - Math.random();&#125;); 利用数学方法生成一个0-1的随机数，再用0.5去减这个随机数，则返回值可能大于0也可能小于0，就这样完成了乱序的排法。 2. 选择排序首先我们要了解什么是选择排序，然后再随其定义的方式去理解包装一个函数。选择排序：即第一轮排序把最小的或者最大的找出来放在最开始的位置或者最末尾的位置，然后接着从剩下的元素中寻找最大或最小，放在次位上。我们现在假设有一个数组 [10, 7, 4, 3, 16] 并且要将该数组按照升序排序第一轮我们把数组的第一个位置即其index为0的元素与后面的相比较，如果有比自己小的，就和它交换位置。 所以第一轮的比较应该是这样的：第一次比较：10 &gt; 7 所以10和7交换位置，此时数组是 [7, 10, 4, 3, 16] ，第一个位置变成了7第二次比较：7 &gt; 4 所以7和4交换位置，此时数组是 [4, 10, 7, 3, 16] , 第一个位置变成了4第三次比较：4 &gt; 3 所以3和4交换位置，此时数组是 [3, 10, 7, 4, 16], 第一个位置变成了3第四次比较：3 &lt; 16 所以3不和16交换位置， 所以此时数组还是 [3, 10, 7, 4, 16] 第二轮比较把index为0的从数组里“请出去”，对其后面的即 [10, 7, 4, 16]进行比较，所以比较详情是这样的:第一次比较：10 &gt; 7 所以10和7 交换位置，此时数组为 [7, 10, 4, 16]第二次比较：7 &gt; 4 所以7和4交换位置，此时数组为 [4, 10, 7, 16]第三次比较：4 &lt; 16 所以4和16交换位置，此时数组还是 [4, 10, 7, 16] 第三轮比较则把index是0和1的都“请”出去，再开始进行比较，即从 [10, 7, 16]开始进行比较：第一次比较：10 &gt; 7 所以10和7交换位置，此时数组为 [7, 10, 16]第二次比较：7 &lt; 16 所以7和16不交换位置，此时数组还是 [7, 10, 16] 第四轮比较把之前比过的数都“请”出去，简化为 [10, 16] 再进行比较第一次比较：10 &lt; 16 所以不交换位置，所以还是 [10, 16] 第五轮比较:没数可以进行比较了 从上面可以推出选择排序的规律，即需要进行的是数组里的元素的个数减一次的轮数，而每一轮的比较的次数又恰恰是数组的元素个数减去比较的轮数。所以我们可以开始进行一个简单的函数封装。这里我把这个函数封装在数组原型链上，当然也可以单独提出来封装一个函数 123456789101112Array.prototype.choose = function () &#123; var len = this.length; // 计算出数组的元素个数 for(var i = 0; i &lt; len - 1; i++)&#123; // 循环次数为比较的轮数，i代表这次index不变的数 for(var j = i + 1; j &lt; len; j++)&#123; // 从数组中轮数加一次的位置开始比较，比较的次数自然为元素个数减去比较轮数 if(this[i] &gt; this[j])&#123; // 如果当前index为i的元素大于了当前index为j的元素，则两者交换，升序 var temp = this[j]; this[j] = this[i]; this[i] = temp; &#125; &#125; &#125;&#125; 3. 冒泡排序冒泡排序，其原理和sort(里面封装一个函数通过返回值改变两两相邻元素的位置)差不多，接下来将展示冒泡排序的过程。我们定义一个数组 [10, 7, 4, 3, 16] 数组内两两相邻元素进行比较，如果前一个元素大于后面一个，则交换位置 开始第一轮比较：第一次比较：10 &gt; 7 所以10和7交换位置，此时数组为 [7, 10, 4, 3, 16]第二次比较：10 &gt; 4 所以10和4交换位置，此时数组为 [7, 4, 10, 3, 16]第三次比较：10 &gt; 3 所以10和3交换位置，此时数组为 [7, 4, 3, 10, 16]第四次比较：10 &lt; 16 所以10和16不交换位置，此时数组为 [7, 4, 3, 10, 16] 第二轮比较，数组最后一个元素就可以不参加比较了，简化为 [7, 4, 3, 10] 进行比较：第一次比较：7 &gt; 4 所以7和4交换位置，此时数组为 [4, 7, 3, 10]第二次比较：7 &gt; 3 所以7和3交换位置，此时数组为 [4, 3, 7, 10]第三次比较：7 &lt; 10 所以不交换位置，此时数组为 [4, 3, 7, 10, 16] 第三轮比较，把之前以及不用进行比较的两个元素“请出去”，即简化为 [4, 3, 7]第一次比较：4 &gt; 3 所以4和3交换位置，此时数组为 [3, 4, 7]第二次比较：4 &lt; 7 所以不交换位置，此时数组为 [3, 4, 7, 10, 16]【注】这里是因为数组的元素偶然情况变成了这样，但是我们还要有一次比较没有做，所又有一个比较 数组此时只差 [3, 4] 没进行比较了，所以开始第四轮比较：第一次比较：3 &lt; 4 所以不交换位置，此时所有比较进行完毕，数组最终为 [3, 4, 7, 10, 16] 现在总结一下冒泡排序的规律，总共进行了 数组元素减一 轮的比较，每一轮的比较的次数都等于元素个数减去轮数再减一，所以我们现在可以很轻松地在数组原型链上封装一个冒泡排序的函数。代码如下： 123456789101112Array.prototype.bubble = function () &#123; var len = this.length; for(var i = 0; i &lt; len -1; i++)&#123; for(var j = 0; j &lt; len - i -1; j++)&#123; if(this[j] &gt; this[j + 1])&#123; var temp = this[j + 1]; this[j + 1] = this[j]; this[j] = temp; &#125; &#125; &#125;&#125; 关于排序，就到这了啦 ~]]></content>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS 定位]]></title>
    <url>%2F2019%2F09%2F06%2FCSS%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[CSS中有关绝对定位和相对定位的问题我个人认为绝对定位和相对定位的作用是很容易搞混的，所以这里仅记载了我个人对absolute和relative的用处做了一点小小的区分。 为什么要使用定位？首先，关于定位，我们为什么要使用定位？使用定位可以让我们使用top, left, bottom, right属性，来快速的为一个元素找到其相应的位置，如果没有使用定位，则这些属性就算给了属性值，也没有办法让元素根据它所给定的属性值进行排版。所以如果想在某一特定元素中给一个元素定位，那就要给这一特定元素添加定位。 绝对定位和相对定位 绝对定位: absolute当元素使用绝对定位即 position:absolute; 属性的时候，如果元素的父级没有定位，即该元素会继续向上寻找拥有定位的祖先级元素相对于它进行定位操作。如果某一元素使用了绝对定位，但从它的父级包括其父级往上找都找不到有定位的祖先及元素，那么它会相对与(能够显示的页面宽度高度)页面进行定位，定位后不会随页面滚动而固定。 相对定位: relative当元素使用相对定位的时候，不管父级有没有定位，其只能相对于其父级进行定位，但是请注意position:relative无法使用right和bottom属性。 拓展：固定定位(fixed)当元素使用固定定位的时候，其可以使用top, left, bottom, right属性。一旦元素使用了固定定位，则其就相对于页面固定了，通常用于回到顶部，顶部导航栏等待。]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>position</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS 如何清除浮动]]></title>
    <url>%2F2019%2F09%2F06%2FCSS%E5%A6%82%E4%BD%95%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[什么是浮动浮动即在CSS中添加的属性float，其属性值可以是left(靠左浮动), right(靠右浮动), none(不浮动), inherit(继承父级浮动)。 浮动就像是如图中气球和熊一样，熊被气球的浮力带动，脱离地面浮在空中，即html中添加了float属性的标签都会脱离原本的文档流，在父级元素中漂浮起来。 为什么要清除浮动正如上面说到，浮动会导致元素脱离原来的文档流，漂浮在父级元素中，因此浮动元素后面的元素就会占据浮动元素的位置。举个例子，就好比上面图片的熊和空气的关系。我们假设熊周围的空气有颜色，并且颜色是一层一层的不同的颜色。熊浮动起来之前，和熊位于同一平面的空气是无法占据到熊的位置的。但是熊浮动起来之后，此时，我们从上往下看就无法看见或看到少量熊旁边的那一层颜色了，原因是熊旁边的那一层的空气把熊原来的位置给占据了。因此元素浮动之后，会影响到后续元素的排版和展示，所以我们在使用完浮动之后，根据情况是要清除浮动的。 那我们要如何清除浮动呢？ 在父级元素上的样式中添加代码 clear: left/right/both; 其中三个属性代表的是清除左浮动/右浮动/全部浮动，但是这个方法有缺陷，它虽然可以达到清除父级元素内的浮动的目的，但是却没办法让父级元素根据子元素的浮动而撑开其高度，所以这个方法不常用。 利用伪类元素清除浮动 第一种写法 123456789.clearfix:after&#123; content:&quot;&quot;; // 内容为空就可以了 display:block; // 把伪元素转为块级元素 clear:both; visibility:hidden; // 设为不可见&#125;.clearfix&#123; *zoom:1;&#125; 第二种写法 12345678910.clearfix:before,.clearfix:after&#123; content:&quot;&quot;; display:block;&#125;.clearfix:after&#123; clear:both;&#125;.clearfix&#123; *zoom:1;&#125; 用法： 一般将这段代码写在CSS样式表的顶部，添加在浮动元素的父级元素上。 【注】 如果浮动元素和不浮动元素在同一父级元素下，请将连续浮动的元素包裹起来为它们建立一个独立的父级元素与不浮动元素同级，否则清除浮动不生效。 拓展使用overflow清除浮动，即在父级元素的CSS样式中添加代码 overflow: auto; 同样可以清除浮动。]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>清除浮动</tag>
      </tags>
  </entry>
</search>
